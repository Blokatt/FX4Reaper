desc: MonoCtrl (Blokatt)
//tags: korg monologue midi
//author: Jan Vorisek


slider1:sChannel=1<0,1,17{All,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16}>MIDI Channel
slider2:sListen=1<1,1,0{No,Yes}>Listen to MIDI
slider3:sEventFilter=0<0,1,0{All events,CC and PC only}>MIDI Passthrough
//slider4:sInitPlayback=0<0,1.0,0.0{No,Yes}>Send all CC to device on playback start

slider5:sProgram=1<1,100,1>Program
//================================//
slider7:sVCO1Wave=2<0,1,3{Square,Triangle,Sawtooth}>VCO1 Waveform
slider8:sVCO1Shape=0<0,127,1>VCO1 Shape
//================================//
slider10:sVCO2Wave=2<0,1,3{Noise,Triangle,Sawtooth}>VCO2 Waveform
slider11:sVCO2Shape=0<0,127,1>VCO2 Shape
slider12:sVCO2Pitch=0<-64,63,1>VCO2 Pitch
slider13:sVCO2Octave=0<-1,2,1>VCO2 Octave
//================================//
slider15:sVCOMode=1<0,1,3{Ring,No sync,Sync}>Sync/Ring
//================================//
slider17:sVCO1Level=127<0,127,1>VCO1 Level
slider18:sVCO2Level=0<0,127,1>VCO2 Level
//================================//
slider20:sFilterCutoff=127<0,127,1>Filter Cutoff
slider21:sFilterResonance=0<0,127,1>Filter Resonance
//================================//
slider23:sLFOWave=0<0,1,3{Square,Triangle,Sawtooth}>LFO Wave
slider24:sLFOMode=0<0,1,3{One shot,Slow,Fast}>LFO Mode
slider25:sLFORate=0<0,127,1>LFO Rate
slider26:sLFOIntensity=0<-64,63,1>LFO Intensity
slider27:sLFOTarget=0<0,1,3{Cutoff,Shape,Pitch}>LFO Target
//================================//
slider29:sEGType=0<0,1,3{Gate,Attack/Gate/Decay,Attack/Decay}>EG Type
slider30:sEGAttack=0<0,127,1>EG Attack
slider31:sEGDecay=0<0,127,1>EG Decay
slider32:sEGIntensity=0<-64,63,1>EG Intensity
slider33:sEGTarget=0<0,1,3{Cutoff,Pitch 2,Pitch}>EG Target
//================================//
slider35:sDrive=0<0,127,1>Drive

filename:0,logo.png
filename:1,background.png

@init
  backW = 0;
  backH = 0;
  
  //ext_noinit = 1.0;   
  CCCount = 23;
  cc = 0;
  ccSlider = 100;
  ccSliderOld = 200;
  ccSliderAutomateID = 300;
  ccid = 0;
  sliderCounter = 0;
  function assignCC()
  (
        ccid += 1;
        ccid - 1;
  );
  
  function initCC(id)
  (
      i = assignCC();
      cc[i] = id;
      ccSlider[i] = sliderCounter + 5;
      ccSliderOld[i] = sliderCounter + 5;
      ccSliderAutomateID[i] = i + 5;
      sliderCounter += 1;
      i;
  );
  
  function invalidateCCSliders()
  (
      i = 1;
      loop(CCCount, 
        ccSliderOld[i] = -1;
        i += 1;
      ); 
  );
  function invalidateSliders()
  (
      i = 0;
      loop(CCCount, 
        ccSliderOld[i] = -1;
        i += 1;
      ); 
  );
  
  function sliderSpacing()
  (
    sliderCounter += 1;
  );
  
  function getSlider(id)
  (
    slider(ccSlider[id]);
  );
  
  function randInt(x)
  (
    min(floor(rand(x + 1)), x);  
  );
  
  function getSliderAutomate(id)
   (
     slider(ccSliderAutomateID[id]);
   );
  
  function sendCC(ch, cc, val)
  (
    cc == -1 ? midisend(0, 0xc0 | ch, val) : midisend(0, 0xb0 | ch, cc, val);
  );
  
  function sendUpdatedCC(ch, ccID, val)
  (
    getSlider(ccID) != ccSliderOld[ccID] ? sendCC(ch, cc[ccID], val);
  );
  
  function updateCCParam(ccID, val)
  (        
    getSlider(ccID) = val;  
    slider_automate(getSliderAutomate(ccID));        
  );
  
  function isSwitch(cc)
  (
    (cc == VCO2OctaveCC || cc == VCO1WaveCC || cc == VCO2WaveCC || cc == VCOModeCC ||cc ==  LFOWaveCC || cc == LFOModeCC || cc == LFOTargetCC || cc == EGTypeCC || cc == EGTargetCC);
  ); 
  
  function isCenteredKnob(cc)
  (
    (cc == VCO2PitchCC || cc == LFOIntensityCC || cc == EGIntensityCC);
  ); 
  
  function sendPCToDevice()
  (
    sendUpdatedCC(ch, ProgramCC, sProgram - 1); 
  );

  function sendCCToDevice()
  (                    
      i = 1;
      loop(CCCount,      
        isSwitch(i) ? (
          i == VCO2OctaveCC ? (
            sendUpdatedCC(ch, i, min((getSlider(i) + 1) * 42, 127));   
          ) : (
            sendUpdatedCC(ch, i, min(getSlider(i) * 64, 127));  
          )
        ) : (           
          (isCenteredKnob(i)) ? (   
            sendUpdatedCC(ch, i, getSlider(i) + 64);                                                          
          ) : (
            sendUpdatedCC(ch, i, getSlider(i));                                            
          )
        );        
        i += 1;
      );
    );
  function sendMIDI(ch)
    (           
       buf = 10000;
      maxlen = 65536;
           

       while ((recvlen = midirecv_buf(offset,buf,maxlen)) > 0) (
          recvlen <= 3 && buf[0] == 0xb0 ? (
            _id =  buf[1];
            _val =  buf[2];
            
            i = 1;
            loop(CCCount, 
              _id == cc[i] ? (
                isSwitch(i) ? (
                  i == VCO2OctaveCC ? (
                    getSlider(i) = floor((_val) / 42) - 1;   
                  ) : (
                    getSlider(i) = floor((_val + 1) / 64);   
                  )
                ) : (           
                  (isCenteredKnob(i)) ? (   
                    getSlider(i) = _val - 64;                                                            
                  ) : (
                    getSlider(i) = _val;                                            
                  )
                );
                slider_automate(getSliderAutomate(i));          
              );
              i += 1;
            );  
            
          ) : ( //Program change
          
            //msg1 == 0xc0 | ch ? (    
            recvlen <= 3 && buf[0] == 0xc0 ? (     
             getSlider(ProgramCC) = buf[1] + 1;  
             slider_automate(getSlider(ProgramCC));                   
            )
             : (
              recvlen > 10 && buf[0] == 0xF0 ? (               
              
              //DRIVE
              offset = 39;              
              value = (buf[offset + 9] & 64) >>  6;
              value = value | ((buf[offset + 8] & 1) << 1); 
              value = value | ((buf[offset + 2] & 127) << 2);
              value = value | ((buf[offset] & 2) << 8);                            
              updateCCParam(DriveCC, value >> 3);
              ///////
              
              //VCO1 WAVEFORM
              value = (buf[offset + 3] & 64) >>  6;
              value = value | ((buf[offset] & 4) >> 1); 
              updateCCParam(VCO1WaveCC, value);
              ///////
              
              offset = 23;
              value = (buf[offset + 19] & 12) >>  2;
              value = value | ((buf[offset + 4] & 127) << 2); 
              value = value | ((buf[offset] & 8) << 6); 
              updateCCParam(VCO1ShapeCC, value >> 3);
              
   
              offset = 43;
              value = (buf[offset] & 48) >>  4;
              updateCCParam(VCO2OctaveCC, value - 1);
              
              offset = 39;
              value = (buf[offset + 4] & 64) >>  6;
              value = value | ((buf[offset] & 8) >> 2); 
              updateCCParam(VCO2WaveCC, value);
              
              offset = 44;
              value = (buf[offset] & 3);              
              updateCCParam(VCOModeCC, value);
              
              offset = 23;
              value = (buf[offset + 20] & 12) >> 2;
              value = value | ((buf[offset + 6] & 127) << 2); 
              value = value | ((buf[offset] & 32) << 4); 
              updateCCParam(VCO2ShapeCC, value >> 3);              

              value = ((buf[offset] & 16) << 5);
              value = value | ((buf[offset + 5] & 127) << 2);
              value = value | (buf[offset + 20] & 3);
              updateCCParam(VCO2PitchCC, value >> 3 - 64);
              
              value = ((buf[offset] & 64) << 3);
              value = value | ((buf[offset + 7] & 127) << 2);
              value = value | (buf[offset + 22] & 3);
              updateCCParam(VCO1LevelCC, value >> 3);
              
              offset = 31;
              value = ((buf[offset] & 1) << 9);
              value = value | ((buf[offset + 1] & 127) << 2);
              value = value | (buf[offset + 14] & 12) >> 2;
              updateCCParam(VCO2LevelCC, value >> 3);
              
              value = (buf[offset] & 2) << 8;
              value = value | ((buf[offset + 2] & 127) << 2);
              value = value | ((buf[offset + 14] & 48) >> 4);
              updateCCParam(CutoffCC, value >> 3);
              
              value = (buf[offset] & 4) << 7;
              value = value | ((buf[offset + 3] & 127) << 2);
              value = value | ((buf[offset + 8] & 32) >> 4);
              value = value | ((buf[offset + 14] & 64) >> 6);
              updateCCParam(ResonanceCC, value >> 3);
              
              offset = 46;
              value = (buf[offset] & 3);
              updateCCParam(EGTypeCC, value );
              
              offset = 31;
              value = (buf[offset] & 8) << 6;
              value = value | ((buf[offset + 4] & 127) << 2);
              value = value | ((buf[offset + 15] & 12) >> 2);
              updateCCParam(EGAttackCC, value >> 3);
              
              value = (buf[offset] & 16) << 5;
              value = value | ((buf[offset + 5] & 127) << 2);
              value = value | ((buf[offset + 15] & 48) >> 4);
              updateCCParam(EGDecayCC, value >> 3);
              
              value = (buf[offset] & 32) << 4;
              value = value | ((buf[offset + 6] & 127) << 2);
              value = value | ((buf[offset + 17] & 3));
              updateCCParam(EGIntensityCC, (value >> 3) - 64);
              
              offset = 39;
              value = (buf[offset] & 64) >> 5;
              value = value | ((buf[offset + 7] & 64) >> 6);
              updateCCParam(EGTargetCC, value);
              
              offset = 49;
              value = (buf[offset] & 3);
              updateCCParam(LFOWaveCC, value);
              
              value = (buf[offset] & 12) >> 2;
              updateCCParam(LFOModeCC, value);
              
              offset = 31;
              value = (buf[offset] & 64) << 3;
              value = value | ((buf[offset + 7] & 127) << 2);
              value = value | ((buf[offset + 17] & 12) >> 2);
              updateCCParam(LFORateCC, value >> 3);
              
              offset = 39;
              value = (buf[offset] & 1) << 9;
              value = value | ((buf[offset + 1] & 127) << 2);
              value = value | ((buf[offset + 9] & 48) >> 4);
              updateCCParam(LFOIntensityCC, (value >> 3) - 64);
              
              offset = 49;
              value = (buf[offset] & 48) >> 4;
              updateCCParam(LFOTargetCC, value);
              
              invalidateCCSliders();              
              //ccSliderOld[ProgramCC] = ccSlider[ProgramCC];
              sendCCToDevice();
              //sSysex = value;
              
              ) : (
             // sSysex =  buf[0];
               a=0;
              //sSysex = buf[0];
               //midisend_buf(offset,buf,recvlen); 
              //midisend(offset,msg1,msg2,msg3);
             );
            );
            
          ); 
       );          
       sendCCToDevice();
  
      
      
      (trigger & 0x01) ? (
          invalidateSliders();
          sendCCToDevice();
      );
      
      (trigger & 0x02) ? (
        updateCCParam(VCO1WaveCC, randInt(2));
        updateCCParam(VCO1ShapeCC, randInt(0x7f));        
        updateCCParam(VCO2WaveCC, randInt(2));
        updateCCParam(VCO2ShapeCC, randInt(0x7f));
        updateCCParam(VCO2PitchCC, -64 + randInt(0x7f));
        updateCCParam(VCO2OctaveCC, -1 + randInt(3));        
        updateCCParam(VCOModeCC, randInt(2));        
        updateCCParam(VCO1LevelCC, randInt(0x7f));
        updateCCParam(VCO2LevelCC, randInt(0x7f));        
        updateCCParam(CutoffCC, randInt(0x7f));
        updateCCParam(ResonanceCC, randInt(0x7f));        
        updateCCParam(LFOWaveCC, randInt(2));
        updateCCParam(LFOModeCC, randInt(2));
        updateCCParam(LFORateCC, randInt(127));
        updateCCParam(LFOIntensityCC, -64 + randInt(0x7f));
        updateCCParam(LFOTargetCC,  randInt(2));        
        updateCCParam(EGTypeCC, randInt(2));
        updateCCParam(EGAttackCC,  floor(min(pow(rand(1), 10) * 0x7f, 0x7f)));
        updateCCParam(EGDecayCC, floor(min(0x7f - pow(rand(1), 10) * 0x7f, 0x7f)));
        updateCCParam(EGIntensityCC, -64 + randInt(0x7f));
        updateCCParam(EGTargetCC, randInt(2));
        updateCCParam(DriveCC, randInt(0x7f));
        
        invalidateCCSliders();       
        sendCCToDevice();
      );
  
      /*
      buf = 3;
      buf[0] = outCh;
      buf[1] = 50; 
      buf[2] = sVCO1Wave;
      midisend_buf(0, buf, 3);
      */    
    );
    function update()
    (
      sChannel ? (
          sendMIDI(sChannel - 1);
        ):(
          i = 0;
          loop(16, 
            sendMIDI(i);
            i += 1;
          );    
        );
    ); 
    update();
  /*
  Init order must be same as slider order!
  */   
  
  ProgramCC = initCC(-1);
  
  sliderSpacing();
 
  VCO1WaveCC = initCC(50);      
  VCO1ShapeCC = initCC(36);
  
  sliderSpacing();
 
  VCO2WaveCC = initCC(51);    
  VCO2ShapeCC = initCC(37);
  VCO2PitchCC = initCC(35);
  VCO2OctaveCC = initCC(49);
  
  sliderSpacing();
  
  VCOModeCC = initCC(60);
  
  sliderSpacing();
  
  VCO1LevelCC = initCC(39);
  VCO2LevelCC = initCC(40);
  
  sliderSpacing();
  
  CutoffCC = initCC(43);
  ResonanceCC = initCC(44);
  
  sliderSpacing();
  
  LFOWaveCC = initCC(58);
  LFOModeCC = initCC(59);  
  LFORateCC = initCC(24);
  LFOIntensityCC = initCC(26);  
  LFOTargetCC = initCC(56);
  
  sliderSpacing();
  
  EGTypeCC = initCC(61);
  EGAttackCC = initCC(16);  
  EGDecayCC = initCC(17);
  EGIntensityCC = initCC(25);  
  EGTargetCC = initCC(62);  
  
  sliderSpacing();
  
  DriveCC = initCC(28);  
  invalidateCCSliders();
  sendCCToDevice();
  
 
 
  
@block
  update();      
  i = 0;
  loop(CCCount, 
    ccSliderOld[i] = getSlider(i);
    i += 1;
  ); 
  trigger = trigger;

@gfx gfx_w, 100
  gfx_getimgdim(1, backW, backH); 
  repeats = ceil((gfx_h + 20) / backH);
  i = 0;
  gfx_x = 0;
  off = (time_precise() * 20) % 20;
  loop(repeats,   
    gfx_y = floor(backH * i - off);
    gfx_blit(1, 1, 0);
    i += 1;
  );
  
  gfx_r = 1.0;
  gfx_g = 1.0;
  gfx_b = 1.0;
  gfx_x = gfx_w - 10;
  gfx_y = 0;
  gfx_setfont(1, "Courier New", 20);
  //gfx_drawnumber(rand(100), 10);
  gfx_drawstr("Trigger:", 255);
  //gfx_line(0,0,testval,10); 
  gfx_rect(1, 1, gfx_w - 1, gfx_h - 1,0);
 
  scale = 1;
  gfx_setfont(1, "Courier New", 13);
  gfx_x = 6;
  gfx_y = gfx_h - 2;
  //gfx_drawnumber(rand(100), 10);
  
  gfx_drawstr("blokatt.net | @blokatt | 2019.", 8|256, gfx_x, gfx_y);
  
  gfx_x = 10 + sin(time_precise() * 5) * 2; 
  gfx_y = gfx_h / 2 - 30;
   
  gfx_blit(0, scale, (rand(1) - .5) * .05);
  gfx_mode = 1;
  gfx_a = rand(1) * .4;
  gfx_x = 165 / 2 - (73.5 * 1.1);
  gfx_y = (gfx_h / 2 - 30) * 0.95;
  gfx_blit(0, scale + 0.1, (rand(1) - .5) * .075);
  gfx_a = 1;
  gfx_mode = 0;
    
