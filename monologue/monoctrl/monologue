desc: MonoCtrl (Blokatt)
//tags: korg monologue midi
//author: Jan Vorisek


slider1:sChannel=1<0,1,17{All,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16}>MIDI Channel
slider2:sBlockMIDIPassthrough=1<0,1,1{All events,CC and PC only}>MIDI Passthrough
slider3:sSendPCOnInit=0:0<0,2,1{On program change and playback start,On program change only,Never (local preset)}>Auto-request program from synth
//slider4:sInitPlayback=0<0,1.0,0.0{No,Yes}>Send all CC to device on playback start

slider5:sProgram=1<1,100,1>Program
//================================//
slider7:sVCO1Wave=2<0,1,3{Square,Triangle,Sawtooth}>VCO1 Waveform
slider8:sVCO1Shape=0<0,127,1>VCO1 Shape
//================================//
slider10:sVCO2Wave=2<0,1,3{Noise,Triangle,Sawtooth}>VCO2 Waveform
slider11:sVCO2Shape=0<0,127,1>VCO2 Shape
slider12:sVCO2Pitch=0<-64,63,1>VCO2 Pitch
slider13:sVCO2Octave=0<-1,2,1>VCO2 Octave
//================================//
slider15:sVCOMode=1<0,1,3{Ring,No sync,Sync}>Sync/Ring
//================================//
slider17:sVCO1Level=127<0,127,1>VCO1 Level
slider18:sVCO2Level=0<0,127,1>VCO2 Level
//================================//
slider20:sFilterCutoff=127<0,127,1>Filter Cutoff
slider21:sFilterResonance=0<0,127,1>Filter Resonance
//================================//
slider23:sLFOWave=0<0,1,3{Square,Triangle,Sawtooth}>LFO Wave
slider24:sLFOMode=0<0,1,3{One shot,Slow,Fast}>LFO Mode
slider25:sLFORate=0<0,127,1>LFO Rate
slider26:sLFOIntensity=0<-64,63,1>LFO Intensity
slider27:sLFOTarget=0<0,1,3{Cutoff,Shape,Pitch}>LFO Target
//================================//
slider29:sEGType=0<0,1,3{Gate,Attack/Gate/Decay,Attack/Decay}>EG Type
slider30:sEGAttack=0<0,127,1>EG Attack
slider31:sEGDecay=0<0,127,1>EG Decay
slider32:sEGIntensity=0<-64,63,1>EG Intensity
slider33:sEGTarget=0<0,1,3{Cutoff,Pitch 2,Pitch}>EG Target
//================================//
slider35:sDrive=0<0,127,1>Drive
slider36:sSysex=0<0,1027,1>sysex

filename:0,logo.png
filename:1,background.png

@init  
  backW = 0;
  backH = 0;
  //ext_noinit = 1.0;   
  CCCount = 23;
  cc = 0;
  
  // MEMORY OFFSETS
  ccSlider = 100;
  ccSliderOld = 200;
  ccSliderAutomateID = 300; 
  consoleLine = 400;
  //
  
  //Testing for successful program request
  programRequest = 0; 
  programRequestTimer = 0;
  
  //50 messages
  i = 0; 
  loop(50,
    consoleLine[i] = 200 + i;
    i += 1;
  );
  //
  consoleRedraw = 1;
  consoleMaxMessageCount = 6;
  consoleHorizontalOffset = 200;
  
  ccid = 0;
  sliderCounter = 0;
  sendPC = !sSendPCOnInit;  
  
  function consolePrint(str)
  (
    //check overflow & shift
    #str = sprintf(#str, "> %s", str);
    (strcmp(consoleLine[0], #str) != 0) ? (
      consoleCurrentMessageCount = min(consoleCurrentMessageCount + 1, consoleMaxMessageCount);    
      j = consoleMaxMessageCount - 1;
      loop(consoleMaxMessageCount - 1,
        //consoleLine[j] = consoleLine[j - 1];
        strcpy(consoleLine[j], consoleLine[j - 1]);
        //printf(consoleLine[j],"%s",consoleLine[j - 1]);
        j -= 1;
      );   
      //consoleLine[1] = "As";
      strcpy(consoleLine[0], #str);
      //sprintf(consoleLine[0], "wwWWasdwjk%s", str);
      //consoleLine[0] = str;
      consoleRedraw = 1;
    );     
  );
  
  function assignCC()
  (
        ccid += 1;
        ccid - 1;
  );
  
  function initCC(id)
  (
      i = assignCC();
      cc[i] = id;
      ccSlider[i] = sliderCounter + 5;
      ccSliderOld[i] = sliderCounter + 5;
      ccSliderAutomateID[i] = i + 5;
      sliderCounter += 1;
      i;
  );
  
  function invalidateCCSliders()
  (
      i = 1;
      loop(CCCount, 
        ccSliderOld[i] = -1;
        i += 1;
      ); 
  );
  function invalidateSliders()
  (
      i = 0;
      loop(CCCount, 
        ccSliderOld[i] = -1;
        i += 1;
      ); 
  );
  
  function sliderSpacing()
  (
    sliderCounter += 1;
  );
  
  function getSlider(id)
  (
    slider(ccSlider[id]);
  );
  
  function randInt(x)
  (
    min(floor(rand(x + 1)), x);  
  );
  
  function getSliderAutomate(id)
   (
     slider(ccSliderAutomateID[id]);
   );
  
  function sendCC(ch, cc, val)
  (
    cc == -1 ? midisend(0, 0xc0 | ch, val) : midisend(0, 0xb0 | ch, cc, val);
  );
  
  function sendUpdatedCC(ch, ccID, val)
  (
    getSlider(ccID) != ccSliderOld[ccID] ? sendCC(ch, cc[ccID], val);
  );
  
  function updateCCParam(ccID, val)
  (        
    getSlider(ccID) = val;  
    slider_automate(getSliderAutomate(ccID));        
  );
  
  function isSwitch(cc)
  (
    (cc == VCO2OctaveCC || cc == VCO1WaveCC || cc == VCO2WaveCC || cc == VCOModeCC ||cc ==  LFOWaveCC || cc == LFOModeCC || cc == LFOTargetCC || cc == EGTypeCC || cc == EGTargetCC);
  ); 
  
  function isCenteredKnob(cc)
  (
    (cc == VCO2PitchCC || cc == LFOIntensityCC || cc == EGIntensityCC);
  ); 
  
  function sendPCToDevice()
  (
    sendUpdatedCC(ch, ProgramCC, sProgram - 1); 
  );
  
  function bufSubStr(bfr, a, b)
  (
    #str = "";
    i = 0;
    loop(b, 
      sprintf(#str, "%s%c", #str,bfr[a + i]);
      i += 1;
    );
    
    #str;      
  );

  function sendCCToDevice()
  (                    
      i = 1;
      loop(CCCount,      
        isSwitch(i) ? (
          i == VCO2OctaveCC ? (
            sendUpdatedCC(ch, i, min((getSlider(i) + 1) * 42, 127));   
          ) : (
            sendUpdatedCC(ch, i, min(getSlider(i) * 64, 127));  
          )
        ) : (           
          (isCenteredKnob(i)) ? (   
            sendUpdatedCC(ch, i, getSlider(i) + 64);                                                          
          ) : (
            sendUpdatedCC(ch, i, getSlider(i));                                            
          )
        );        
        i += 1;
      );
    );
  function sendMIDI(ch)
    (           
      buf = 10000;
      maxlen = 65536;


      while ((recvlen = midirecv_buf(offset,buf,maxlen)) > 0) (
          recvlen <= 3 && buf[0] == 0xb0 ? (
            _id =  buf[1];
            _val =  buf[2];
            i = 1;
            loop(CCCount, 
              _id == cc[i] ? (
                isSwitch(i) ? (
                  i == VCO2OctaveCC ? (
                    getSlider(i) = floor((_val) / 42) - 1;   
                  ) : (
                    getSlider(i) = floor((_val + 1) / 64);   
                  )
                ) : (           
                  (isCenteredKnob(i)) ? (   
                    getSlider(i) = _val - 64;                                                            
                  ) : (
                    getSlider(i) = _val;                                            
                  )
                );
                slider_automate(getSliderAutomate(i));          
              );
              i += 1;
            );  
            
          ) : ( //Program change
            
            //msg1 == 0xc0 | ch ? (    
            recvlen <= 3 && buf[0] == 0xc0 ? (            
             getSlider(ProgramCC) = buf[1] + 1;  
             slider_automate(getSlider(ProgramCC));                   
            ) : (
              //F0 7E 00 06 02 42 44 01 00 00 01 00 0E 00 F7
              //temp = "asd";
              
              (recvlen >= 10 && buf[0] == 0xF0) ? (
                #temp = bufSubStr(buf, 0, 15);
                
                (!stricmp(#temp, "\xF0\xFE\x00\x06\x02\x42\x44\x01\x00\x00\x01\x00\x0E\x00\xF7")) ? ( 
                  sSysex = 50;
                );
                sSysex = buf[0];
                sSysex = 10;
              );

              (recvlen >= 518 && buf[0] == 0xF0) ? (     
              sSysex += 2;          
              offset = 6;
              
              (buf[offset] == 0x4C) ? (
                  offset += 4;
              ) : (
                  offset += 2;
              );     
              
              i = 0;

              #temp = bufSubStr(buf, offset, 4);
              (strcmp(#temp,  "PROG") == 0) ? (      
                programRequest = 0;
                programRequestTimer = 0;
                //sprintf(#temp,"%f",rand(5));
                offset += 4;
                
                #temp = "";
                
                i = 0;
                valid = 0;
                loop(14,
                    (buf[offset + i] != 0 && i != 11)? (
                      sprintf(#temp, "%s%c", #temp, buf[offset + i]);
                      valid += 1;
                    ); 
                    i +=1;
                );
                consolePrint(sprintf(#, "RECV: Program '%s'", #temp)); 
           
                ///// VCO1 LEVEL
                offset += 11;        
                value = ((buf[offset] & 64) << 3);
                value = value | ((buf[offset + 7] & 127) << 2);
                value = value | (buf[offset + 22] & 3);
                updateCCParam(VCO1LevelCC, value >> 3);
                
                
                /////VCO2 SHAPE
                value = ((buf[offset] & 32) << 4);
                value = value | ((buf[offset + 6] & 127) << 2);
                value = value | ((buf[offset + 20] & 12) >> 2);
                updateCCParam(VCO2ShapeCC, value >> 3);  
                
                
                ///// VCO2 PITCH
                value = ((buf[offset] & 16) << 5);
                value = value | ((buf[offset + 5] & 127) << 2);
                value = value | (buf[offset + 20] & 3);  
                updateCCParam(VCO2PitchCC, value >> 3 - 64);      
                
                ///// VCO1 SHAPE
                value = ((buf[offset] & 8) << 6);
                value = value | ((buf[offset + 4] & 127) << 2);
                value = value | ((buf[offset + 19] & 12) >> 2);        
                updateCCParam(VCO1ShapeCC, value >> 3);
                
                ///// LFO RATE
                offset += 8;        
                value = (buf[offset] & 64) << 3;
                value = value | ((buf[offset + 7] & 127) << 2);
                value = value | ((buf[offset + 17] & 12) >> 2);    
                updateCCParam(LFORateCC, value >> 3);    
                
                ///// EG INTENSITY
                value = (buf[offset] & 32) << 4;
                value = value | ((buf[offset + 6] & 127) << 2);
                value = value | (buf[offset + 17] & 3);
                updateCCParam(EGIntensityCC, (value >> 3) - 64);
                
                
                ///// EG DECAY
                value = (buf[offset] & 16) << 5;
                value = value | ((buf[offset + 5] & 127) << 2);
                value = value | ((buf[offset + 15] & 48) >> 4);
                updateCCParam(EGDecayCC, value >> 3);
                
                
                ///// EG ATTACK
                value = (buf[offset] & 8) << 6;
                value = value | ((buf[offset + 4] & 127) << 2);
                value = value | ((buf[offset + 15] & 12) >> 2);      
                updateCCParam(EGAttackCC, value >> 3);  
                
                ///// FILTER RESONANCE
                value = (buf[offset] & 4) << 7;
                value = value | ((buf[offset + 3] & 127) << 2);
                value = value | ((buf[offset + 8] & 32) >> 4);
                value = value | ((buf[offset + 14] & 64) >> 6);    
                updateCCParam(ResonanceCC, value >> 3);   
                
                ///// FILTER CUTOFF
                value = (buf[offset] & 2) << 8;
                value = value | ((buf[offset + 2] & 127) << 2);
                value = value | ((buf[offset + 14] & 48) >> 4);
                updateCCParam(CutoffCC, value >> 3);
                
                
                ///// VCO2 LEVEL
                value = ((buf[offset] & 1) << 9);
                value = value | ((buf[offset + 1] & 127) << 2);
                value = value | (buf[offset + 14] & 12) >> 2;
                updateCCParam(VCO2LevelCC, value >> 3);
                
                
                ///// EG TARGET
                offset += 8;        
                value = (buf[offset] & 64) >> 5;
                value = value | ((buf[offset + 7] & 64) >> 6);
                updateCCParam(EGTargetCC, value);
                
                ///// VCO2 WAVE
                value = ((buf[offset] & 8) >> 2);
                value = value | ((buf[offset + 4] & 64) >> 6);
                updateCCParam(VCO2WaveCC, value);
                
                ///// VCO1 WAVE
                value = ((buf[offset] & 4) >> 1);
                value = value | ((buf[offset + 3] & 64) >> 6);
                updateCCParam(VCO1WaveCC, value);
                
                ///// DRIVE
                value = ((buf[offset] & 2) << 8);
                value = value | ((buf[offset + 2] & 127) << 2);
                value = value | ((buf[offset + 8] & 1) << 1);
                value = value | ((buf[offset + 9] & 64) >> 6);
                updateCCParam(DriveCC, value >> 3);
                
                ///// LFO INTENSITY
                value = (buf[offset] & 1) << 9;
                value = value | ((buf[offset + 1] & 127) << 2);
                value = value | ((buf[offset + 9] & 48) >> 4);
                updateCCParam(LFOIntensityCC, (value >> 3) - 64);
                
                ///// VCO2 OCTAVE
                offset += 4;
                value = (buf[offset] & 48) >> 4;
                updateCCParam(VCO2OctaveCC, value - 1);
                
                ///// RING/SYNC
                offset += 1;
                value = (buf[offset] & 3);
                updateCCParam(VCOModeCC, value);
                
                ///// EG TYPE
                offset += 2;        
                value = (buf[offset] & 3);     
                updateCCParam(EGTypeCC, value );
                
                ///// LFO TARGET    
                offset += 3;        
                value = (buf[offset] & 48) >> 4;
                updateCCParam(LFOTargetCC, value);
                
                ///// LFO MODE
                value = (buf[offset] & 12) >> 2;
                updateCCParam(LFOModeCC, value);
                
                ///// LFO WAVE
                value = (buf[offset] & 3);
                updateCCParam(LFOWaveCC, value);
                
                invalidateCCSliders();              
                //ccSliderOld[ProgramCC] = ccSlider[ProgramCC];
                sendCCToDevice();
                
                //sSysex = value;
                );            
              ) : (
                (!sBlockMIDIPassthrough) ? midisend_buf(offset,buf,recvlen); 
              );
            );            
          ); 
       );          
       sendCCToDevice();
       
      (trigger & 0x01) ? (
          invalidateSliders();
          sendCCToDevice();
      );
      
      (trigger & 0x02) ? (
        updateCCParam(VCO1WaveCC, randInt(2));
        updateCCParam(VCO1ShapeCC, randInt(0x7f));        
        updateCCParam(VCO2WaveCC, randInt(2));
        updateCCParam(VCO2ShapeCC, randInt(0x7f));
        updateCCParam(VCO2PitchCC, -64 + randInt(0x7f));
        updateCCParam(VCO2OctaveCC, -1 + randInt(3));        
        updateCCParam(VCOModeCC, randInt(2));        
        updateCCParam(VCO1LevelCC, randInt(0x7f));
        updateCCParam(VCO2LevelCC, randInt(0x7f));        
        updateCCParam(CutoffCC, randInt(0x7f));
        updateCCParam(ResonanceCC, randInt(0x7f));        
        updateCCParam(LFOWaveCC, randInt(2));
        updateCCParam(LFOModeCC, randInt(2));
        updateCCParam(LFORateCC, randInt(127));
        updateCCParam(LFOIntensityCC, -64 + randInt(0x7f));
        updateCCParam(LFOTargetCC,  randInt(2));        
        updateCCParam(EGTypeCC, randInt(2));
        updateCCParam(EGAttackCC,  floor(min(pow(rand(1), 10) * 0x7f, 0x7f)));
        updateCCParam(EGDecayCC, floor(min(0x7f - pow(rand(1), 10) * 0x7f, 0x7f)));
        updateCCParam(EGIntensityCC, -64 + randInt(0x7f));
        updateCCParam(EGTargetCC, randInt(2));
        updateCCParam(DriveCC, randInt(0x7f));
        
        invalidateCCSliders();       
        sendCCToDevice();
      );
      (sProgram != sProgramOld && sendPC && sSendPCOnInit != 2) ? ( 
        midisend_str(0,"\xF0\xFE\x7F\x06\x01\xF7");
        #send = "\xF0\x42\x30\x00\x01\x44\x1C";        
       // #temp += 10;
        send = 1000;
        send[0] = 0xF0;
        send[1] = 0x42;
        send[2] = 0x30;
        send[3] = 0x00;
        send[4] = 0x01;
        send[5] = 0x44;
        send[6] = 0x1C;
        send[7] = sProgram - 1;
        send[8] = 0x00;
        send[9] = 0xf7;     
        midisend_buf(0,send,10); 
        sendPCToDevice();
        programRequest = 1;
      );       
      /*
      buf = 3;
      buf[0] = outCh;
      buf[1] = 50; 
      buf[2] = sVCO1Wave;
      midisend_buf(0, buf, 3);
      */              
    );
    
    function update()
    (      
      sChannel ? (
          sendMIDI(sChannel - 1);
        ):(
          i = 0;
          loop(16, 
            sendMIDI(i);
            i += 1;
          );    
        );
      sProgramOld = sProgram;
      (programRequest) ? (
        programRequestTimer += 1;
        (programRequestTimer > 5) ? (
          consolePrint("ERROR: Program request failed! Check your synth settings and make sure MIDI input is enabled on all channels in order to receive SySex messages.");
          programRequestTimer = 0;
          programRequest = 0;
        );
      );    
    ); 
    update();
    (sSendPCOnInit != 2) ? sendPC = 1;
  /*
  Init order must be same as slider order!
  */     
  ProgramCC = initCC(-1);
  sliderSpacing();
 
  VCO1WaveCC = initCC(50);      
  VCO1ShapeCC = initCC(36);
  
  sliderSpacing();
 
  VCO2WaveCC = initCC(51);    
  VCO2ShapeCC = initCC(37);
  VCO2PitchCC = initCC(35);
  VCO2OctaveCC = initCC(49);
  
  sliderSpacing();
  
  VCOModeCC = initCC(60);
  
  sliderSpacing();
  
  VCO1LevelCC = initCC(39);
  VCO2LevelCC = initCC(40);
  
  sliderSpacing();
  
  CutoffCC = initCC(43);
  ResonanceCC = initCC(44);
  
  sliderSpacing();
  
  LFOWaveCC = initCC(58);
  LFOModeCC = initCC(59);  
  LFORateCC = initCC(24);
  LFOIntensityCC = initCC(26);  
  LFOTargetCC = initCC(56);
  
  sliderSpacing();
  
  EGTypeCC = initCC(61);
  EGAttackCC = initCC(16);  
  EGDecayCC = initCC(17);
  EGIntensityCC = initCC(25);  
  EGTargetCC = initCC(62);  
  
  sliderSpacing();
  DriveCC = initCC(28);  
  invalidateCCSliders();   
  sendPCToDevice();
  sendCCToDevice();
  consolePrint("Init.");   

@slider
(sSendPCOnInit != 2) ? sendPC = 1;
  
@block
  update();      
  i = 0;
  loop(CCCount, 
    ccSliderOld[i] = getSlider(i);
    i += 1;
  ); 
  trigger = trigger;

@gfx 560, 100
  gfx_clear = 0;
  gfx_setimgdim(2, gfx_w, gfx_h);
  gfx_getimgdim(1, backW, backH); 
  repeats = ceil((gfx_h + 20) / backH);
  i = 0;
  gfx_x = 0;
  off = (time_precise() * 20) % 20;
  loop(repeats,   
    gfx_y = floor(backH * i - off);
    gfx_blit(1, 1, 0);
    i += 1;
  );
  
  gfx_r = 1.0;
  gfx_g = 1.0;
  gfx_b = 1.0;
  gfx_x = gfx_w - 10;
  gfx_y = 0;
  //gfx_setfont(1, "Courier New", 20);
  //gfx_drawnumber(rand(100), 10);
  //gfx_drawstr("Trigger:", 255);
  //gfx_line(0,0,testval,10); 
  gfx_rect(1, 1, gfx_w - 1, gfx_h - 1,0);
 
  scale = 1;
  gfx_setfont(1, "Courier New", 13);
  //gfx_y = gfx_h - 2;
  
  consoleMaxMessageCount = floor(gfx_h / 10) - 3;  
  (consoleRedraw) ? (
    gfx_x = 0;
    gfx_y = 0;
    gfx_texth = 10;
    gfx_dest = 2;
    gfx_muladdrect(0, 0, gfx_w, gfx_h, 1, 1, 1, 0); 
    gfx_clear = 10;
    i = 0;
    gfx_y = gfx_h - 20;    
    maxLen =  (gfx_w - consoleHorizontalOffset - 20) / 6;
    lineBreaks = 0;
    
    readWord = 0;
    prematureBreak = 0;
    loop(consoleMaxMessageCount,
      (lineBreaks < consoleMaxMessageCount) ? ( 
        #line = consoleLine[i];
        len = strlen(#line);
        off = 0;
        lineOff = 0;
        messageVerticalOffset = floor(strlen(#line) / maxLen) * 10;
        gfx_x = consoleHorizontalOffset;        
        gfx_y -= messageVerticalOffset;
                          
        loop(len,
          (str_getchar(#line, off) != ' ') ?
          (
            (!readWord) ? (
              j = 0;
              break = 0;
              while (!break)(
                ((lineOff + j) > maxLen) ? (                  
                  prematureBreak = 1;                  
                  break = 1;
                );
                (j > 15 || str_getchar(#line, off + j) == ' ') ? break = 1;
                j += 1;              
              );
              readWord = 1;
            );
          ) : (
            readWord = 0;                        
          );
        
          (lineOff > maxLen || prematureBreak) ? (
            /*
            while (str_getchar(#line, off) != ' ' && off > 0)(
              off -= 1;
            );
            */
            gfx_x = consoleHorizontalOffset;
            //gfx_drawstr(#line, 8|256, gfx_x, gfx_y);
            //#line = strcpy_substr(#line, #line, 0, 10);
            gfx_y += 10;
            lineOff = 0;
            lineBreaks += 1;
            prematureBreak = 0;
          ); 
          gfx_drawchar(str_getchar(#line, off));
          //char = str_getchar(#line, off); 
          off += 1;
          lineOff += 1;
        );
        
        //gfx_drawstr(#line, 8|256, gfx_x, gfx_y);
        gfx_y -= 10;
        gfx_y -= messageVerticalOffset;
        i += 1;
        lineBreaks += 1;
      );
    );
    gfx_dest = -1;
    consoleRedraw = 0;
  );
  
  
  gfx_x = 6;
  gfx_y = gfx_h - 2;
  //gfx_drawnumber(rand(100), 10);
  
  gfx_drawstr("blokatt.net | @blokatt | 2019.", 8|256, gfx_x, gfx_y);
    
  gfx_x = 30;
  gfx_y = 10;
  //gfx_drawstr(#temp); 
  gfx_x = 30;
  gfx_y = 20;

  gfx_x = 10 + sin(time_precise() * 5) * 2; 
  gfx_y = gfx_h / 2 - 30;
    
  gfx_blit(0, scale, (rand(1) - .5) * .05);
  gfx_mode = 1;
  gfx_a = rand(1) * .4;
  gfx_x = 165 / 2 - (73.5 * 1.1);
  gfx_y = (gfx_h / 2 - 30) * 0.95;
  gfx_blit(0, scale + 0.1, (rand(1) - .5) * .075);
  gfx_a = 1;
  gfx_mode = 0;
  
  gfx_x = 0;
  gfx_y = 0;
  gfx_blit(2, 1, 0);


    
